
           git and github useage
           --------------------------------------------------

(c) 2015 Fri Nov  6 10:54:27 CST 2015 Daniel Kelly  <benh at kernel.crashing.org>,
    IBM Corp.



0.setup 

git config --global user.name "YOUR NAME"
git config --global user.email "YOUR EMAIL ADDRESS"



ls -al ~/.ssh
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
clip < ~/.ssh/id_rsa.pub
and then parst in github ssh key



git clone  ...
git help
https://help.github.com/articles/set-up-git/


1. create responsory in github

echo # reverse_list >> README.md
git init     //victor git status
git add README.md // @victor git add . //add all
git commit -m "first commit"   //@victor git commit -am "test demo"
git remote add origin git@github.com:spartacus429496/reverse_list.git
git push -u origin master

2. web help
	see more in git svm docs

3. git branch
	3.1 git commit log 
		git status
		git show-branch
		git branch
		git branch -v
		git log --graph --oneline --all
		git log
		git log --all
		git log --oneline
		git log --oneline
		git checkout -b victor_first e907d00
		git branch 
		git status
		git checkout master


4.git diff
1 git branch Fix
2 git checkout Fix
3 change , echo 'fix!!'>>a
4.git diff
5 git commit -a -m "Fix"
6 git diff master > patch
7 git checkout master
sweetdum@sweetdum-ASUS:~/GitEx$ git branch PATCH
sweetdum@sweetdum-ASUS:~/GitEx$ git checkout PATCH
Switched to branch 'PATCH'
sweetdum@sweetdum-ASUS:~/GitEx$ git apply patch
sweetdum@sweetdum-ASUS:~/GitEx$ git commit -a -m "Patch Apply"
[PATCH 9740af8] Patch Apply
1 files changed, 1 insertions(+), 0 deletions(-)


4.1 git diff branch_a branch_b

4.2 TODO more will come . git commit id

5.0 drop
git如何放弃所有本地修改?
git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态
git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。
git reset --hard HASH #返回到某个节点，不保留修改。
git reset --soft HASH #返回到某个节点。保留修改


6.gerrit usage

1. clone/创建本地branch
   git clone ssh://202.238.109.106/training.git
   git checkout -b csc/training/master remotes/origin/csc/training/master
2. Commit的时候，自动把 change-Id 加入的配置
    scp scmservgit03.sdna.sony.co.jp:hooks/commit-msg .git/hooks/ 
3. 修改，提交
   vim hello.c
   git commit
4. gerrit push
   git push origin HEAD:refs/for/csc/training/master
    <csc/training/master是自己的branch名>
5. 在gerrit reviw page上review设置以及review
   https://scmservgit03.sdna.sony.co.jp

从下面开始，是当第前一次review失败后，修改了代码，如何在保证使用同一个Change Id 把修改做Gerrit push
6. 在Gerrit review page上找到你需要修改的patch set, 点击 'checkout', 这是在下面的文本框中会出现类似下面的fetch命令：
   " git fetch ssh://Chris.Cai@scmservgit03.sdna.sony.co.jp:29418/training refs/changes/87/2687/1 && git checkout FETCH_HEAD " 
	6.1
		rebase button
7. 回到你自己的git 开发分支（通过'git status'检查自己的代码状态） 
8. 执行上面第6步取得的命令。这是 git会自动在HEAD处创建一个临时的空branch。
9. 修改代码。
10. 执行命令，假如commit log。但注意不要手动修改Change Id。 
     git commit --amend
nano ctrl + X
11. 执行gerrit push
     git push origin HEAD：refs/for/csc/training/master     
     <csc/training/master是自己的branch名>

     git push origin HEAD：refs/pulish/feature/pan/ble

12....victor
process conflict in gerrit review  >>> ====
merge
1.
git branch -v
git fetch
git branch -v
git fetch ssh://xJie.Chen@scmservgit04.sdna.sony.co.jp:29418/pj/Spritzer/spritzer refs/changes/65/6765/1 && git checkout FETCH_HEAD
git branch -v
git checkout -b feature/pan/ble_6765
git branch -v
git rebase origin/feature/pan/ble
vim pan/ble/nrf51/ble_gap.c///>>>>
git status
git add pan/ble/nrf51/ble_gap.c///conflict file
git rebase --continue
git log
git push origin HEAD:refs/publish/feature/pan/ble  //gerrit https://scmservgit04.sdna.sony.co.jp/#/c/6765/




7. stash
	7.1 git stash , git stash list , git stash apply --2

8. undo the last commit
	git reset HEAD^
